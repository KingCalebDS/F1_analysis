labs(title = "Lap Time Trends by Driver",
x = "Lap Number",
y = "Lap Time (seconds)",
color = "Driver") +
scale_color_manual(values = driver_colors) +
theme(legend.position = "bottom")
# Create line chart for lap time trends with tire information for top 10 drivers using facets
ggplot(LapData, aes(x = LapNumber, y = LapTimeInSeconds, color = Compound, linetype = Compound)) +
geom_line() +
facet_wrap(~ Driver, scales = "free_y", ncol = 3) +
labs(title = "Lap Time Trends by Top 10 Drivers and Tire Compound",
x = "Lap Number",
y = "Lap Time (seconds)",
color = "Tire Compound",
linetype = "Tire Compound") +
scale_linetype_manual(values = c("solid", "dashed", "dotted", "dotdash", "longdash")) +  # Define line types for tire compounds
theme(legend.position = "bottom")
# Create box plot for lap time distributions by driver
ggplot(LapData, aes(x = reorder(Driver, LapTimeInSeconds, FUN = median), y = LapTimeInSeconds, fill = Driver)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Adjust transparency and remove outliers
scale_fill_discrete(name = "Driver") +  # Customize legend title
scale_fill_manual(values = driver_colors) +
theme_minimal() +  # Apply a minimal theme
labs(title = "Lap Time Distribution by Driver",
x = "Driver",
y = "Lap Time (seconds)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.position = "bottom") +  # Adjust legend position
stat_summary(fun = "mean", geom = "point", shape = 18, size = 3, color = "red")
# Create box plot for lap time distributions by driver and tire compound
ggplot(LapData, aes(x = reorder(Driver, LapTimeInSeconds, FUN = median), y = LapTimeInSeconds, fill = Compound)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Adjust transparency and remove outliers
scale_fill_discrete(name = "Tire Compound") +  # Customize legend title
labs(title = "Lap Time Distribution by Driver and Tire Compound",
x = "Driver",
y = "Lap Time (seconds)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.position = "bottom")
# Aggregate sector times for each driver on each lap
sector_aggregated <- LapData %>%
group_by(Driver, LapNumber) %>%
summarize(Sector1TimeInSeconds = mean(Sector1TimeInSeconds, na.rm = TRUE),
Sector2TimeInSeconds = mean(Sector2TimeInSeconds, na.rm = TRUE),
Sector3TimeInSeconds = mean(Sector3TimeInSeconds, na.rm = TRUE)) %>%
pivot_longer(cols = starts_with("Sector"), names_to = "Sector", values_to = "SectorTimeInSeconds")
# Create line chart for sector analysis with faceting
ggplot(sector_aggregated, aes(x = LapNumber, y = SectorTimeInSeconds, color = Sector)) +
geom_line() +
facet_wrap(~ Driver, scales = "free_y", ncol = 3) +
labs(title = "Sector Analysis by Driver",
x = "Lap Number",
y = "Sector Time (seconds)",
color = "Sector") +
theme(legend.position = "bottom")
# Calculate personal best lap time for each driver
personal_best <- LapData %>%
group_by(Driver) %>%
summarize(PersonalBest = min(LapTimeInSeconds, na.rm = TRUE))
# Set a limit for the y-axis
y_limit <- max(personal_best$PersonalBest) + 5  # Adjust the limit as needed
# Create a bar plot with a y-axis limit and defined colors
ggplot(personal_best, aes(x = reorder(Driver, PersonalBest), y = PersonalBest, fill = Driver)) +
geom_bar(stat = "identity", color = "black") +
scale_fill_manual(values = driver_colors) +  # Assign colors to drivers
labs(title = "Personal Best Lap Times by Driver",
x = "Driver",
y = "Personal Best Lap Time (seconds)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_cartesian(ylim = c(95, 100))  # Set y-axis limit
# Convert Stint to factor with specific levels
Singapore_laps_top_10 <- LapData %>%
mutate(Stint = factor(Stint, levels = c(1, 2, 3)))
# Create box plot for lap time distributions by stint and tire compound
ggplot(Singapore_laps_top_10, aes(x = Stint, y = LapTimeInSeconds, fill = Compound)) +
geom_boxplot() +
facet_wrap(~ Driver, scales = "free_y", ncol = 3) +
labs(title = "Lap Time by Stint and Tire Compound",
x = "Stint",
y = "Lap Time (seconds)",
fill = "Compound")
# Filter data for Lewis Hamilton (HAM) and Max Verstappen (VER)
hamilton_data <- LapData %>% filter(Driver == "HAM")
verstappen_data <- LapData %>% filter(Driver == "VER")
# Perform independent two-sample t-test
t_test_result <- t.test(hamilton_data$LapTimeInSeconds, verstappen_data$LapTimeInSeconds)
# Print the result
print(t_test_result)
# Fit the linear regression model
model <- lm(LapTimeInSeconds ~ Driver, data = LapData)
# Perform ANOVA analysis
anova_result <- anova(model)
# Print the ANOVA table
print(anova_result)
#png("Graph1.png", width = 1200, height = 800)  # Set the width and height as desired
# Create box plot for lap time distributions by driver
ggplot(Singapore_laps_top_10, aes(x = reorder(Driver, LapTimeInSeconds, FUN = median), y = LapTimeInSeconds, fill = Driver)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) + # Adjust transparency and remove outliers
scale_fill_discrete(name = "Driver") + # Customize legend title
scale_fill_manual(values = driver_colors, guide = "none") + # Remove the legend
labs(title = "Lap Time Distribution by Driver",
x = "Driver",
y = "Lap Time (seconds)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 18), # Rotate x-axis labels and increase font size
axis.text.y = element_text(size = 24, hjust = 0.5), # Increase y-axis font size and center align
axis.title = element_text(size = 24, hjust = 0.5), # Increase axis title font size and center align
plot.title = element_text(size = 24, face = "bold", hjust = 0.5), # Center align plot title
legend.position = "none") + # Remove the legend
stat_summary(fun = "mean", geom = "point", shape = 18, size = 3, color = "red")
#dev.off()
#png("Graph2.png", width = 1200, height = 800)  # Set the width and height as desired
ggplot(Singapore_laps_top_10, aes(x = reorder(Driver, LapTimeInSeconds, FUN = median), y = LapTimeInSeconds, fill = Compound)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +
scale_fill_discrete(name = "Tire Compound") +
labs(title = "Lap Time Distribution by Driver and Tire Compound",
x = "Driver",
y = "Lap Time (seconds)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size = 20),
plot.title = element_text(size = 24, face = "bold", hjust = 0.5),
legend.text = element_text(size = 24),  # Increase legend text font size
legend.title = element_text(size = 24),  # Increase legend title font size
legend.key.size = unit(2, "cm"),  # Increase the size of the legend key
legend.spacing.x = unit(1, "cm"),  # Increase horizontal spacing between legend items
legend.spacing.y = unit(0.5, "cm"),  # Increase vertical spacing between legend items
legend.position = "bottom")
#dev.off()
# One-way ANOVA for lap times by driver
one_way_anova <- lm(LapTimeInSeconds ~ Driver, data = Singapore_laps_top_10)
one_way_anova_summary <- summary(one_way_anova)
print(one_way_anova_summary)
# Two-way ANOVA for lap times by driver and tire compound
two_way_anova <- lm(LapTimeInSeconds ~ Driver + Compound + Driver:Compound, data = Singapore_laps_top_10)
two_way_anova_summary <- summary(two_way_anova)
print(two_way_anova_summary)
# Perform chi-square test of independence between tire compound and stint number
contingency_table <- table(Singapore_laps_top_10$Compound, Singapore_laps_top_10$Stint)
chi_square_test <- chisq.test(contingency_table)
# Print the statistical conclusion
cat("- A chi-square test of independence revealed a significant association between tire compound and stint number (Ï‡^2(",
chi_square_test$parameter, ") = ", round(chi_square_test$statistic, 2), ", p < 0.001),",
"indicating that the choice of tire compound varied significantly across stints.\n", sep = "")
#png("Graph3.png", width = 1200, height = 800) # Set the width and height as desired
# Create a vector with the desired driver order
driver_order <- c("SAI", "HAM", "NOR", "LEC", "VER", "PIA", "PER", "GAS", "MAG", "LAW")
# Convert the Driver variable to a factor with the specified order
Singapore_laps_top_10$Driver <- factor(Singapore_laps_top_10$Driver, levels = driver_order)
ggplot(Singapore_laps_top_10, aes(x = Compound, y = LapTimeInSeconds, fill = Compound)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +
scale_fill_discrete(name = "Tire Compound") +
labs(title = "Lap Time Distribution by Driver and Tire Compound",
x = "Tire Compound",
y = "Lap Time (seconds)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size = 20),
plot.title = element_text(size = 24, face = "bold", hjust = 0.5),
legend.text = element_text(size = 24),
legend.title = element_text(size = 24),
legend.key.size = unit(2, "cm"),
legend.spacing.x = unit(1, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.position = "bottom",
strip.text = element_text(size = 20)) +
facet_grid(~ Driver, scales = "free_x", space = "free_x")
#dev.off()
View(LapData)
View(Singapore_laps)
?LapData
View(LapData)
?LapData
?LapData
version
?LapData
# Store the total seconds in the vector
total_seconds_vector[i] <- total_seconds
# Check if the lap time is "NaT"
if (lap_time_vector[i] == "NaT") {
# Assign NA if lap time is "NaT"
total_seconds_vector[i] <- NA
} else {
# Remove the "0 days" prefix from the lap time string
lap_time <- gsub("0 days ", "", lap_time_vector[i])
# Split the lap time string by ":"
time_components <- strsplit(lap_time, ":")[[1]]
# Extract hours, minutes, and seconds
hours <- as.numeric(time_components[1])
minutes <- as.numeric(time_components[2])
seconds <- as.numeric(time_components[3])
# Calculate total seconds
total_seconds <- (hours * 3600) + (minutes * 60) + seconds
# Store the total seconds in the vector
total_seconds_vector[i] <- total_seconds
}
#lap time to seconds function
lap_time_to_seconds <- function(lap_time_vector) {
# Initialize an empty vector to store the total lap times
total_seconds_vector <- numeric(length(lap_time_vector))
# Iterate over each lap time string
for (i in seq_along(lap_time_vector)) {
# Check if the lap time is "NaT"
if (lap_time_vector[i] == "NaT") {
# Assign NA if lap time is "NaT"
total_seconds_vector[i] <- NA
} else {
# Remove the "0 days" prefix from the lap time string
lap_time <- gsub("0 days ", "", lap_time_vector[i])
# Split the lap time string by ":"
time_components <- strsplit(lap_time, ":")[[1]]
# Extract hours, minutes, and seconds
hours <- as.numeric(time_components[1])
minutes <- as.numeric(time_components[2])
seconds <- as.numeric(time_components[3])
# Calculate total seconds
total_seconds <- (hours * 3600) + (minutes * 60) + seconds
# Store the total seconds in the vector
total_seconds_vector[i] <- total_seconds
}
}
return(total_seconds_vector)
}
# load necesssary libraries
library(tidyverse)
# import lap data
Singapore_laps <- read_csv("C:/Users/caleb/Desktop/F1Package/data-raw/Singapore_laps.csv", show_col_types = FALSE)
# create new variable for clean data
Singapore_laps_clean <- Singapore_laps
# create new variable for lap time in seconds
Singapore_laps_clean$LapTimeInSeconds <- lap_time_to_seconds(Singapore_laps_clean$LapTime)
Singapore_laps_clean$Sector1TimeInSeconds <- lap_time_to_seconds(Singapore_laps_clean$Sector1Time)
Singapore_laps_clean$Sector2TimeInSeconds <- lap_time_to_seconds(Singapore_laps_clean$Sector2Time)
Singapore_laps_clean$Sector3TimeInSeconds <- lap_time_to_seconds(Singapore_laps_clean$Sector3Time)
# Singapore_laps_clean$TotalSeconds <- lap_time_to_seconds(Singapore_laps_clean$LapTime)
# Remove rows with missing LapTimeInSeconds
Singapore_laps_clean <- Singapore_laps_clean %>%
filter(!is.na(LapTimeInSeconds)) %>%
filter(!is.na(Sector1TimeInSeconds)) %>%
filter(!is.na(Sector2TimeInSeconds)) %>%
filter(!is.na(Sector3TimeInSeconds))
# Remove columns not needed
Singapore_laps_clean <- subset(Singapore_laps_clean, select = -c(Time,DriverNumber,PitOutTime,PitInTime,Sector1Time,Sector2Time,Sector3Time,Sector1SessionTime, Sector2SessionTime,Sector3SessionTime,SpeedI1,SpeedI2,SpeedST,TyreLife,FreshTyre,LapStartTime,LapStartDate,TrackStatus,Deleted,DeletedReason,FastF1Generated,IsAccurate,LapTime,SpeedFL))
# Calculate the interquartile range (IQR) for LapTimeInSeconds
lap_time_iqr <- quantile(Singapore_laps_clean$LapTimeInSeconds, c(0, 0.75), na.rm = TRUE)
iqr <- lap_time_iqr[2] - lap_time_iqr[1]
# Define the lower and upper bounds for outliers
lower_bound <- lap_time_iqr[1] - 0.5 * iqr  # Adjust the multiplier to retain faster lap times
upper_bound <- lap_time_iqr[2] + 0.5 * iqr
# Filter out lap times that are outliers
Singapore_laps_clean <- Singapore_laps_clean %>%
filter(LapTimeInSeconds >= lower_bound & LapTimeInSeconds <= upper_bound)
# Filter data to include only the top 10 drivers based on their position in the last lap
last_lap_positions <- Singapore_laps_clean %>%
filter(LapNumber == max(LapNumber)) %>%
arrange(Position) %>%
slice(1:10) %>%
pull(Driver)
LapData <- Singapore_laps_clean %>%
filter(Driver %in% last_lap_positions)
# Save the data frame tp the data/ directory as rda
usethis::use_data(LapData)
knitr::opts_chunk$set(echo = FALSE)
library(F1Package)
library(readr)
library(ggplot2)
suppressPackageStartupMessages(library(dplyr))
library(tidyr)
library(knitr)
suppressPackageStartupMessages(library(kableExtra))
library(webshot2)
library(magick)
# Find the fastest lap for each driver
fastest_laps <- LapData %>%
group_by(Driver) %>%
summarise(FastestLapTime = min(LapTimeInSeconds),
FastestLapNum = LapNumber[which.min(LapTimeInSeconds)],
FastestStint = Stint[which.min(LapTimeInSeconds)],
FastestPB = IsPersonalBest[which.min(LapTimeInSeconds)],
FastestTireCompound = Compound[which.min(LapTimeInSeconds)],
FastestLapPosition = Position[which.min(LapTimeInSeconds)],
FastestSector1 = Sector1TimeInSeconds[which.min(LapTimeInSeconds)],
FastestSector2 = Sector2TimeInSeconds[which.min(LapTimeInSeconds)],
FastestSector3 = Sector3TimeInSeconds[which.min(LapTimeInSeconds)])
# Join the fastest lap information with the original data
fastest_laps_data <- LapData %>%
inner_join(fastest_laps, by = "Driver") %>%
select(Driver, FastestLapNum, FastestStint, FastestPB, FastestTireCompound, Team, FastestLapPosition,
FastestLapTime, FastestSector1, FastestSector2, FastestSector3) %>%
distinct()
# Display the fastest laps using kable and kable_styling
kable(fastest_laps_data,
col.names = c("Driver", "Lap Number", "Stint", "PB", "Tire Compound", "Team", "Position",
"Lap Time", "Sector 1", "Sector 2", "Sector 3")) %>%
kable_styling(full_width = FALSE, font_size = 18) %>%
column_spec(1:11, width = "60px", extra_css = "text-align: center;") %>%
row_spec(0, bold = TRUE, color = "white", background = "#0073e6") %>%
row_spec(seq(1, nrow(fastest_laps_data), 2), background = "#f7f7f7") %>%
row_spec(seq(2, nrow(fastest_laps_data), 2), background = "white") #%>%
#save_kable(file = "/Users/caleblking/Desktop/F1Project/table_1.png")
# Summary tables: 1-2; small descriptions of variable, type, other descriptive statistics.
# Calculate descriptive statistics for lap times
lap_time_summary <- summary(LapData$LapTimeInSeconds)
print(lap_time_summary)
# Calculate mean and standard deviation of lap times
lap_time_mean <- mean(LapData$LapTimeInSeconds)
lap_time_sd <- sd(LapData$LapTimeInSeconds)
print(paste("Mean lap time:", round(lap_time_mean, 2)))
print(paste("Standard deviation of lap times:", round(lap_time_sd, 2)))
# Select relevant variables for correlation analysis
correlation_vars <- c("LapTimeInSeconds", "Sector1TimeInSeconds", "Sector2TimeInSeconds", "Sector3TimeInSeconds")
# Create a correlation matrix
correlation_matrix <- cor(LapData[, correlation_vars])
# Print the correlation matrix
print(correlation_matrix)
driver_colors <- c(
"VER" = "#0600EF",  # Dark blue (Red bull)
"HAM" = "#00D2BE",  # Turquoise (Mercedes)
"PER" = "#ffe119",  # Blue (Red bull)
"SAI" = "#FF0000",  # Red (Ferrari)
"LAW" = "#000075",  # Navy (AlphaTauri)
"NOR" = "#FF8700",  # Orange (Mclaren)
"LEC" = "#C00000",  # Dark red (Ferrari)
"MAG" = "#911eb4",  # Purple (HAAS)
"GAS" = "#f032e6",  # Dark red (Alpine)
"PIA" = "#006F62"   # Dark turquoise (Mclaren)
)
# lap time distribution
ggplot(LapData, aes(x = LapTimeInSeconds)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Lap Time Distribution",
x = "Lap Time (seconds)",
y = "Frequency")
# Reshape the data to long format for faceting
Singapore_laps_top_10_long <- LapData %>%
select(Driver, LapTimeInSeconds, Sector1TimeInSeconds, Sector2TimeInSeconds, Sector3TimeInSeconds) %>%
pivot_longer(cols = starts_with("Sector"), names_to = "Sector", values_to = "SectorTimeInSeconds")
# Create a faceted plot comparing lap times against sector times
ggplot(Singapore_laps_top_10_long, aes(x = SectorTimeInSeconds, y = LapTimeInSeconds)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ Sector, ncol = 3, scales = "free_x") +
labs(title = "Lap Time vs. Sector Times",
x = "Sector Time (seconds)",
y = "Lap Time (seconds)")
ggplot(LapData, aes(x = LapNumber, y = LapTimeInSeconds, color = Driver)) +
geom_line() +
labs(title = "Lap Time Trends by Driver",
x = "Lap Number",
y = "Lap Time (seconds)",
color = "Driver") +
scale_color_manual(values = driver_colors) +
theme(legend.position = "bottom")
# Create line chart for lap time trends with tire information for top 10 drivers using facets
ggplot(LapData, aes(x = LapNumber, y = LapTimeInSeconds, color = Compound, linetype = Compound)) +
geom_line() +
facet_wrap(~ Driver, scales = "free_y", ncol = 3) +
labs(title = "Lap Time Trends by Top 10 Drivers and Tire Compound",
x = "Lap Number",
y = "Lap Time (seconds)",
color = "Tire Compound",
linetype = "Tire Compound") +
scale_linetype_manual(values = c("solid", "dashed", "dotted", "dotdash", "longdash")) +  # Define line types for tire compounds
theme(legend.position = "bottom")
# Create box plot for lap time distributions by driver
ggplot(LapData, aes(x = reorder(Driver, LapTimeInSeconds, FUN = median), y = LapTimeInSeconds, fill = Driver)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Adjust transparency and remove outliers
scale_fill_discrete(name = "Driver") +  # Customize legend title
scale_fill_manual(values = driver_colors) +
theme_minimal() +  # Apply a minimal theme
labs(title = "Lap Time Distribution by Driver",
x = "Driver",
y = "Lap Time (seconds)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.position = "bottom") +  # Adjust legend position
stat_summary(fun = "mean", geom = "point", shape = 18, size = 3, color = "red")
# Create box plot for lap time distributions by driver and tire compound
ggplot(LapData, aes(x = reorder(Driver, LapTimeInSeconds, FUN = median), y = LapTimeInSeconds, fill = Compound)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Adjust transparency and remove outliers
scale_fill_discrete(name = "Tire Compound") +  # Customize legend title
labs(title = "Lap Time Distribution by Driver and Tire Compound",
x = "Driver",
y = "Lap Time (seconds)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.position = "bottom")
# Aggregate sector times for each driver on each lap
sector_aggregated <- LapData %>%
group_by(Driver, LapNumber) %>%
summarize(Sector1TimeInSeconds = mean(Sector1TimeInSeconds, na.rm = TRUE),
Sector2TimeInSeconds = mean(Sector2TimeInSeconds, na.rm = TRUE),
Sector3TimeInSeconds = mean(Sector3TimeInSeconds, na.rm = TRUE)) %>%
pivot_longer(cols = starts_with("Sector"), names_to = "Sector", values_to = "SectorTimeInSeconds")
# Create line chart for sector analysis with faceting
ggplot(sector_aggregated, aes(x = LapNumber, y = SectorTimeInSeconds, color = Sector)) +
geom_line() +
facet_wrap(~ Driver, scales = "free_y", ncol = 3) +
labs(title = "Sector Analysis by Driver",
x = "Lap Number",
y = "Sector Time (seconds)",
color = "Sector") +
theme(legend.position = "bottom")
# Calculate personal best lap time for each driver
personal_best <- LapData %>%
group_by(Driver) %>%
summarize(PersonalBest = min(LapTimeInSeconds, na.rm = TRUE))
# Set a limit for the y-axis
y_limit <- max(personal_best$PersonalBest) + 5  # Adjust the limit as needed
# Create a bar plot with a y-axis limit and defined colors
ggplot(personal_best, aes(x = reorder(Driver, PersonalBest), y = PersonalBest, fill = Driver)) +
geom_bar(stat = "identity", color = "black") +
scale_fill_manual(values = driver_colors) +  # Assign colors to drivers
labs(title = "Personal Best Lap Times by Driver",
x = "Driver",
y = "Personal Best Lap Time (seconds)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_cartesian(ylim = c(95, 100))  # Set y-axis limit
# Convert Stint to factor with specific levels
Singapore_laps_top_10 <- LapData %>%
mutate(Stint = factor(Stint, levels = c(1, 2, 3)))
# Create box plot for lap time distributions by stint and tire compound
ggplot(Singapore_laps_top_10, aes(x = Stint, y = LapTimeInSeconds, fill = Compound)) +
geom_boxplot() +
facet_wrap(~ Driver, scales = "free_y", ncol = 3) +
labs(title = "Lap Time by Stint and Tire Compound",
x = "Stint",
y = "Lap Time (seconds)",
fill = "Compound")
# Filter data for Lewis Hamilton (HAM) and Max Verstappen (VER)
hamilton_data <- LapData %>% filter(Driver == "HAM")
verstappen_data <- LapData %>% filter(Driver == "VER")
# Perform independent two-sample t-test
t_test_result <- t.test(hamilton_data$LapTimeInSeconds, verstappen_data$LapTimeInSeconds)
# Print the result
print(t_test_result)
# Fit the linear regression model
model <- lm(LapTimeInSeconds ~ Driver, data = LapData)
# Perform ANOVA analysis
anova_result <- anova(model)
# Print the ANOVA table
print(anova_result)
#png("Graph1.png", width = 1200, height = 800)  # Set the width and height as desired
# Create box plot for lap time distributions by driver
ggplot(Singapore_laps_top_10, aes(x = reorder(Driver, LapTimeInSeconds, FUN = median), y = LapTimeInSeconds, fill = Driver)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) + # Adjust transparency and remove outliers
scale_fill_discrete(name = "Driver") + # Customize legend title
scale_fill_manual(values = driver_colors, guide = "none") + # Remove the legend
labs(title = "Lap Time Distribution by Driver",
x = "Driver",
y = "Lap Time (seconds)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 18), # Rotate x-axis labels and increase font size
axis.text.y = element_text(size = 24, hjust = 0.5), # Increase y-axis font size and center align
axis.title = element_text(size = 24, hjust = 0.5), # Increase axis title font size and center align
plot.title = element_text(size = 24, face = "bold", hjust = 0.5), # Center align plot title
legend.position = "none") + # Remove the legend
stat_summary(fun = "mean", geom = "point", shape = 18, size = 3, color = "red")
#dev.off()
#png("Graph2.png", width = 1200, height = 800)  # Set the width and height as desired
ggplot(Singapore_laps_top_10, aes(x = reorder(Driver, LapTimeInSeconds, FUN = median), y = LapTimeInSeconds, fill = Compound)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +
scale_fill_discrete(name = "Tire Compound") +
labs(title = "Lap Time Distribution by Driver and Tire Compound",
x = "Driver",
y = "Lap Time (seconds)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size = 20),
plot.title = element_text(size = 24, face = "bold", hjust = 0.5),
legend.text = element_text(size = 24),  # Increase legend text font size
legend.title = element_text(size = 24),  # Increase legend title font size
legend.key.size = unit(2, "cm"),  # Increase the size of the legend key
legend.spacing.x = unit(1, "cm"),  # Increase horizontal spacing between legend items
legend.spacing.y = unit(0.5, "cm"),  # Increase vertical spacing between legend items
legend.position = "bottom")
#dev.off()
# One-way ANOVA for lap times by driver
one_way_anova <- lm(LapTimeInSeconds ~ Driver, data = Singapore_laps_top_10)
one_way_anova_summary <- summary(one_way_anova)
print(one_way_anova_summary)
# Two-way ANOVA for lap times by driver and tire compound
two_way_anova <- lm(LapTimeInSeconds ~ Driver + Compound + Driver:Compound, data = Singapore_laps_top_10)
two_way_anova_summary <- summary(two_way_anova)
print(two_way_anova_summary)
# Perform chi-square test of independence between tire compound and stint number
contingency_table <- table(Singapore_laps_top_10$Compound, Singapore_laps_top_10$Stint)
chi_square_test <- chisq.test(contingency_table)
# Print the statistical conclusion
cat("- A chi-square test of independence revealed a significant association between tire compound and stint number (Ï‡^2(",
chi_square_test$parameter, ") = ", round(chi_square_test$statistic, 2), ", p < 0.001),",
"indicating that the choice of tire compound varied significantly across stints.\n", sep = "")
#png("Graph3.png", width = 1200, height = 800) # Set the width and height as desired
# Create a vector with the desired driver order
driver_order <- c("SAI", "HAM", "NOR", "LEC", "VER", "PIA", "PER", "GAS", "MAG", "LAW")
# Convert the Driver variable to a factor with the specified order
Singapore_laps_top_10$Driver <- factor(Singapore_laps_top_10$Driver, levels = driver_order)
ggplot(Singapore_laps_top_10, aes(x = Compound, y = LapTimeInSeconds, fill = Compound)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +
scale_fill_discrete(name = "Tire Compound") +
labs(title = "Lap Time Distribution by Driver and Tire Compound",
x = "Tire Compound",
y = "Lap Time (seconds)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size = 20),
plot.title = element_text(size = 24, face = "bold", hjust = 0.5),
legend.text = element_text(size = 24),
legend.title = element_text(size = 24),
legend.key.size = unit(2, "cm"),
legend.spacing.x = unit(1, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.position = "bottom",
strip.text = element_text(size = 20)) +
facet_grid(~ Driver, scales = "free_x", space = "free_x")
#dev.off()
?LapData
